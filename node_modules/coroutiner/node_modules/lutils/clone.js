// Generated by CoffeeScript 1.9.2
(function() {
  var clone, merge, typeOf,
    hasProp = {}.hasOwnProperty;

  typeOf = require('./typeOf');

  merge = require('./merge');


  /*
  	Clones an object by iterating over objects and array, re-wrapping them.
  	Copies over own properties, refrences previous object's __proto__
   */

  module.exports = clone = function(obj, depth, types) {
    var skeleton;
    if (depth == null) {
      depth = clone.depth;
    }
    if (types == null) {
      types = clone.types;
    }
    types = clone.castTypes(types);
    skeleton = clone.skeleton(obj, null, types);
    return clone.iterate(skeleton || {}, obj, depth, types);
  };

  clone.skeleton = function(value, type, types) {
    if (type == null) {
      type = typeOf(value);
    }
    if (!(type in types)) {
      return null;
    }
    switch (type) {
      case 'object':
        if (value.__proto__) {
          return Object.create(value.__proto__);
        } else {
          return {};
        }
        break;
      case 'array':
        return [];
      default:
        return null;
    }
  };


  /*
  	Defaults
   */

  clone.depth = 8;

  clone.types = {
    object: true,
    array: true
  };

  clone.castTypes = function(types) {
    var i, key, len, obj;
    if (typeOf.Object(types)) {
      return types;
    }
    obj = {};
    for (i = 0, len = types.length; i < len; i++) {
      key = types[i];
      obj[key] = true;
    }
    return obj;
  };

  clone.iterate = function(obj1, obj2, depth, types) {
    var key, parentType, skeleton, type, value;
    if (--depth >= 0) {
      parentType = typeOf(obj2);
      for (key in obj2) {
        if (!hasProp.call(obj2, key)) continue;
        value = obj2[key];
        type = typeOf(value);
        if (type in types && depth > 0) {
          if (skeleton = clone.skeleton(value, type, types)) {
            if (depth > 0) {
              value = clone.iterate(skeleton, value, depth, types);
            }
          }
        }
        obj1[key] = value;
      }
    }
    return obj1;
  };


  /*
  	[Deprecated.]
   */

  clone.array = function(obj) {
    return obj.slice(0);
  };


  /*
  	[Deprecated.]
   */

  clone.json = function(obj, depth) {
    var cloned;
    if (depth == null) {
      depth = clone.depth;
    }
    cloned = JSON.parse(JSON.stringify(obj));
    return merge(cloned, clone.findRegExp(obj), depth, ['object', 'array']);
  };


  /*
  	[Deprecated.]
  	
  	Recursively finds all RegExp in an object by creating a deep skeleton object
  	containing only the RegExp values. Useful when you wish to preserve RegExp (which can't be done with JSON cloning).
   */

  clone.findRegExp = function(obj) {
    var key, results, val;
    results = {};
    for (key in obj) {
      val = obj[key];
      switch (typeOf(val)) {
        case 'regexp':
          results[key] = val;
          break;
        case 'array':
        case 'object':
          results[key] = arguments.callee(val);
      }
    }
    return results;
  };

}).call(this);
