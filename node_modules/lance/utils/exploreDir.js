// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, exploreDir, fs, path, typeOf;

  Promise = require('bluebird');

  fs = require('fs');

  path = require('path');

  typeOf = require('./core').typeOf;

  module.exports = exploreDir = function(dir, o, fileIterator) {
    var depth, ignorePrefix, iterator;
    if (typeOf.Function(o)) {
      fileIterator = o;
      o = {};
    }
    depth = o.depth || 6;
    ignorePrefix = o.ignorePrefix != null ? o.ignorePrefix : '_';
    iterator = Promise.coroutine(function*(dir, depth) {
      var await, filename, filenames, fn, i, len;
      if (--depth < 0) {
        return null;
      }
      filenames = (yield fs.readdirAsync(dir));
      await = [];
      fn = function(filename) {
        var filePath;
        filePath = path.resolve(path.join(dir, filename));
        return await.push(fs.statAsync(filePath).then(function(stats) {
          if (filename[0] === ignorePrefix || !stats) {
            return null;
          }
          if (stats.isDirectory()) {
            if (o.directory) {
              o.directory(filePath, stats);
            }
            return iterator(filePath, depth);
          } else if (stats.isFile() && o.file) {
            return fs.readFileAsync(filePath, 'utf8').then(function(file) {
              var ext, name;
              ext = path.extname(filename);
              name = path.basename(filename, ext);
              return o.file(file, filePath, filename, name, ext);
            });
          }
        }));
      };
      for (i = 0, len = filenames.length; i < len; i++) {
        filename = filenames[i];
        fn(filename);
      }
      return Promise.all(await);
    });
    return iterator(dir, depth);
  };

}).call(this);
