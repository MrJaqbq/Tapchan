// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, merge, promisify, ref, typeOf,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require('bluebird');

  ref = require('./core'), merge = ref.merge, typeOf = ref.typeOf;


  /*
  	Iterates over all properties of an object and if
  	a function is found, apply Promise.coroutine or Promise.method
  	depending on whether it's a generator or not.
  
  	@param obj {Object}
  	@param whiteList {Array} Keys in `obj`
  	@return obj
   */

  module.exports = promisify = function(obj, whiteList) {
    var key, val;
    if (whiteList == null) {
      whiteList = [];
    }
    for (key in obj) {
      val = obj[key];
      if (whiteList.length && indexOf.call(whiteList, key) < 0) {
        continue;
      }
      if (typeOf.Function(val)) {
        obj[key] = promisify.create(val);
      }
    }
    return obj;
  };

  promisify.create = function(val) {
    if (val.constructor.name === 'GeneratorFunction') {
      return Promise.coroutine(val);
    } else {
      return Promise.method(val);
    }
  };

  promisify.createCoroutine = function(val) {
    if (val.constructor.name === 'GeneratorFunction') {
      return Promise.coroutine(val);
    }
    return val;
  };

  promisify.createMethod = function(val) {
    if (val.constructor.name !== 'GeneratorFunction') {
      return Promise.method(val);
    }
    return val;
  };

  promisify.generators = function(obj, whiteList) {
    var key, val;
    if (whiteList == null) {
      whiteList = [];
    }
    for (key in obj) {
      val = obj[key];
      if (whiteList.length && indexOf.call(whiteList, key) < 0) {
        continue;
      }
      if (typeOf.Function(val)) {
        obj[key] = promisify.createCoroutine(val);
      }
    }
    return obj;
  };

  promisify.functions = function(obj, whiteList) {
    var key, val;
    if (whiteList == null) {
      whiteList = [];
    }
    for (key in obj) {
      val = obj[key];
      if (whiteList.length && indexOf.call(whiteList, key) < 0) {
        continue;
      }
      if (typeOf.Function(val)) {
        obj[key] = promisify.createMethod(val);
      }
    }
    return obj;
  };

  promisify.all = function(obj, depth, promisifier) {
    var key, newFn, val;
    if (depth == null) {
      depth = 20;
    }
    if (promisifier == null) {
      promisifier = promisify.create;
    }
    if (--depth > 1) {
      for (key in obj) {
        val = obj[key];
        switch (typeOf(val)) {
          case 'function':
            val = promisify.all(val, depth, promisifier);
            newFn = promisifier(val);
            merge(newFn, val, null, ['object', 'function']);
            obj[key] = newFn;
            break;
          case 'object':
            promisify.all(val, depth, promisifier);
        }
      }
    }
    return obj;
  };

  promisify.all.generators = function(obj, depth) {
    return promisify.all(obj, depth, promisify.createCoroutine);
  };

  promisify.all.functions = function(obj, depth) {
    return promisify.all(obj, depth, promisify.createMethod);
  };

}).call(this);
