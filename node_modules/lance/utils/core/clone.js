// Generated by CoffeeScript 1.9.1
(function() {
  var clone, merge, typeOf;

  typeOf = require('./typeOf');

  merge = require('./merge');

  module.exports = clone = function(obj, depth) {
    var err;
    if (depth == null) {
      depth = 8;
    }
    try {
      return clone.json(obj);
    } catch (_error) {
      err = _error;
      return clone.merge(obj, depth);
    }
  };

  clone.json = function(obj) {
    var newObj;
    newObj = JSON.parse(JSON.stringify(obj));
    return merge(newObj, clone.findRegExp(obj));
  };

  clone.findRegExp = function(obj) {
    var key, results, val;
    results = {};
    for (key in obj) {
      val = obj[key];
      switch (typeOf(val)) {
        case 'regexp':
          results[key] = val;
          break;
        case 'object':
          results[key] = arguments.callee(val);
      }
    }
    return results;
  };

  clone.merge = function(obj, depth) {
    var skeleton;
    if (depth == null) {
      depth = 10;
    }
    skeleton = typeOf.Array(obj) ? [] : {};
    return clone.merge.iterate(skeleton, obj, depth);
  };

  clone.merge.hard = clone.merge;

  clone.merge.iterate = function(obj1, obj2, depth) {
    var key, obj2Type, wrap;
    if (depth == null) {
      depth = 10;
    }
    if (--depth > 0) {
      for (key in obj2) {
        obj2Type = typeOf(obj2[key]);
        wrap = null;
        switch (obj2Type) {
          case 'object':
            wrap = {};
            break;
          case 'array':
            wrap = [];
        }
        if (wrap) {
          obj1[key] = clone.merge.iterate(wrap, obj2[key], depth);
        } else {
          obj1[key] = obj2[key];
        }
      }
    }
    return obj1;
  };

  clone.array = function(obj) {
    return obj.slice(0);
  };

}).call(this);
