// Generated by CoffeeScript 1.9.1
(function() {
  var format,
    slice = [].slice;

  module.exports = format = {

    /*
    		Format a string to be a url-friendly slug
    
    		@param str {String} This "is" some text!
    		@return {String} str this-is-some-text
     */
    slugify: function(str) {
      return (decodeURIComponent(str.toString('utf8'))).toLowerCase().replace(/[^a-z0-9-]+/g, '-').replace(/^[\s\-]+|[\s\-]+$/g, '');
    },

    /*
    		Format a space or hyphen delimited string to camelCase
    
    		@param str {String} some words here
    		@return {String} someWordsHere
     */
    camelCase: function(str) {
      return (format.slugify(str)).replace(/([^a-z0-9]+)([a-z0-9])/ig, function(a, b, c) {
        return c.toUpperCase();
      }).replace(/([0-9]+)([a-zA-Z])/g, function(a, b, c) {
        return c.toUpperCase();
      }).replace(/([0-9]+)([a-zA-Z])/g, function(a, b, c) {
        return b + c.toUpperCase();
      });
    },

    /*
    		Iterates over an Object or Array
    		calling JSON.stringify on any child Object or Arrays.
    		Not recursive.
    		
    		@param obj {mixed}
    		@param jsonArgs... Passed to JSON.stringify
    		@return obj
     */
    jsonify: function() {
      var jsonArgs, key, obj, val;
      obj = arguments[0], jsonArgs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (key in obj) {
        val = obj[key];
        switch (typeOf(val)) {
          case 'object':
          case 'array':
            obj[key] = JSON.stringify.apply(JSON, [val].concat(slice.call(jsonArgs)));
        }
      }
      return obj;
    },

    /*
    		Escapes all regexp characters in a string.
    		
    		@param str {String}
    		@return str
     */
    escapeRegExp: function(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
  };

}).call(this);
