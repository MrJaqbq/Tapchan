// Generated by CoffeeScript 1.9.3
(function() {
  var EventHandler, merge, prettyError, ref, typeOf,
    slice = [].slice;

  ref = require('../utils'), typeOf = ref.typeOf, merge = ref.merge, prettyError = ref.prettyError;

  module.exports = EventHandler = (function() {
    function EventHandler(lance1, emitter1) {
      this.lance = lance1;
      this.emitter = emitter1;
      this.emitter || (this.emitter = this.lance);
      this.listen(this.emitter);
    }

    EventHandler.prototype.listen = function(emitter) {
      var cfg, debugAll, ref1, ref2, ref3;
      cfg = this.lance.cfg.logging;
      emitter.on('err', function(err, scope, reverse) {
        if (scope == null) {
          scope = '';
        }
        return console.error(prettyError(err, scope, reverse));
      });
      if (cfg.requests) {
        emitter.on('request', function(o) {
          var timeDiff, timeUnit;
          timeDiff = new Date().getTime() - o.time.getTime();
          timeUnit = 'ms';
          if (timeDiff > 1000) {
            timeDiff = timeDiff / 1000;
            timeUnit = 's';
          }
          return console.log((' ' + timeDiff + timeUnit).grey, o.method.grey.bold, o.route.url.href.toString().green, require('util').inspect(o.path).toString().slice(0, 101).grey, require('util').inspect(o.query).toString().slice(0, 101).grey);
        });
      }
      if (cfg.startup) {
        emitter.on('templater.ready', function() {
          return console.log('~ templater'.grey, 'ready'.green);
        });
        emitter.on('server.starting', (function(_this) {
          return function(lance) {
            cfg = lance.cfg.server;
            return console.log('~ server'.grey, 'starting', 'on'.grey, (cfg.method === 'socket' ? cfg.socket : cfg.host + ':' + cfg.port).cyan);
          };
        })(this));
        emitter.on('server.listening', function() {
          return console.log('~ server'.grey, 'listening'.green);
        });
        emitter.on('server.ready', function() {
          return console.log('~ server'.grey, 'ready'.green);
        });
        emitter.on('ready', function() {
          return console.log('~'.grey, 'ready'.green);
        });
      }
      if (cfg.debug) {
        debugAll = cfg.debug === true;
        if (debugAll || typeOf.Object(cfg.debug)) {
          if (debugAll || ((ref1 = cfg.debug) != null ? ref1.watch : void 0)) {
            emitter.on('templater.watch', function(fileDir) {
              return console.log('templater.watch'.grey, fileDir);
            });
            emitter.on('templater.watch.change', function(fileDir, event) {
              return console.log('templater.watch.change'.grey, fileDir);
            });
          }
          if (debugAll || ((ref2 = cfg.debug) != null ? ref2.render : void 0)) {
            emitter.on('templater.render.template', function(fileDir) {
              return console.log('templater.render.template'.grey, fileDir);
            });
            emitter.on('templater.render.css', function(fileDir) {
              return console.log('templater.render.css'.grey, fileDir);
            });
            emitter.on('templater.render.js', function(fileDir) {
              return console.log('templater.render.js'.grey, fileDir);
            });
            emitter.on('templater.render.coffee', function(fileDir) {
              return console.log('templater.render.coffee'.grey, fileDir);
            });
            emitter.on('templater.render.stylus', function(fileDir) {
              return console.log('templater.render.stylus'.grey, fileDir);
            });
            emitter.on('templater.bundle.render', function(fileDir) {
              return console.log('templater.bundle.render'.grey, fileDir);
            });
          }
          if (debugAll || ((ref3 = cfg.debug) != null ? ref3.files : void 0)) {
            return emitter.on('templater.writeFile', function(to) {
              return console.log('templater.writeFile'.grey, 'to'.grey, to);
            });
          }
        }
      }
    };


    /*
    		Relays all events from @emitter to the specified emitter.
     */

    EventHandler.prototype.relay = function(emitter) {
      var emit;
      emit = this.emitter.emit.bind(this.emitter);
      return this.emitter.emit = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          emitter.emit.apply(emitter, args);
          return emit.apply(null, args);
        };
      })(this);
    };

    EventHandler.prototype.extend = function(emittee) {
      emittee._events = this.emitter._events;
      emittee.on = this.emitter.on.bind(this.emitter);
      emittee.emit = this.emitter.emit.bind(this.emitter);
      return emittee;
    };

    return EventHandler;

  })();

}).call(this);
