// Generated by CoffeeScript 1.9.3
(function() {
  var Emitter, Lance, Promise, clone, cluster, coroutiner, format, fs, http, merge, os, path, ref, typeOf, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Promise = require('bluebird');

  Emitter = require('events').EventEmitter;

  path = require('path');

  cluster = require('cluster');

  fs = require('fs');

  os = require('os');

  http = require('http');

  require('colors');

  ref = utils = require('../utils'), clone = ref.clone, merge = ref.merge, typeOf = ref.typeOf, format = ref.format, coroutiner = ref.coroutiner;

  module.exports = coroutiner(Lance = (function(superClass) {
    var data;

    extend(Lance, superClass);

    Lance.prototype.data = data = {
      cfg: require('../config'),
      mimetypes: require('../data/mimetypes')
    };

    Lance.prototype.cfg = data.cfg;

    Lance.prototype.utils = utils;

    Lance.prototype.EventHandler = require('./EventHandler');

    Lance.prototype.Templater = require('./Templater');

    Lance.prototype.Router = require('./Router');

    Lance.prototype.RequestHandler = require('./RequestHandler');

    function Lance(newCfg) {
      this.onPossiblyUnhandledRejection = bind(this.onPossiblyUnhandledRejection, this);
      var Lactate, handler, i, len, ref1, ref2, ref3, route, templater;
      this.cfg = clone(this.cfg);
      if (newCfg) {
        merge(this.cfg, newCfg);
      }
      this.eventHandler = new this.EventHandler(this);
      if (handler = this.cfg.catchUncaught || this.cfg.catchUncaughtPromises) {
        if (!typeOf.Function(handler)) {
          handler = this.onPossiblyUnhandledRejection;
        }
        if ((ref1 = this.cfg.Promise) != null) {
          ref1.onPossiblyUnhandledRejection(handler);
        }
        Promise.onPossiblyUnhandledRejection(handler);
      }
      if (this.cfg.server.cluster === null) {
        this.cfg.server.cluster = this.cfg.server.workers > 1;
      }
      this.paths = {
        root: this.cfg.root || path.dirname(require.main.filename)
      };
      templater = this.cfg.templater || this.cfg.templating;
      if (templater.autoConstruct) {
        if (!templater.root) {
          templater.root = this.paths.root;
        }
        this.templater = new this.Templater(templater, this);
      }
      if (this.cfg.server["static"]) {
        if (typeOf.String(this.cfg.server["static"])) {
          this.paths["static"] = this.cfg.server["static"];
        } else if (this.cfg.templater.saveTo) {
          this.paths["static"] = this.cfg.templater.saveTo;
        }
        if (this.paths["static"] && !path.isAbsolute(this.paths["static"])) {
          this.paths["static"] = path.join(this.paths.root, this.paths["static"]);
        }
      }
      this.router = new this.Router(this.cfg.router, this);
      try {
        Lactate = require('lactate');
      } catch (_error) {}
      if ((Lactate != null) && this.cfg.server["static"] && this.paths["static"]) {
        this.staticServer = Lactate.dir(this.paths["static"], {});
        console.log('~ server'.grey, 'serving static'.green);
        this.router.get(['/static/*', '/:file(favicon.ico|robots.txt)'], 'static', (function(_this) {
          return function(o) {
            return _this.staticServer.serve(o.path.file || o.splats.join('.'), o.req, o.res);
          };
        })(this));
      }
      if ((ref2 = this.cfg.routes) != null ? ref2.length : void 0) {
        ref3 = this.cfg.routes;
        for (i = 0, len = ref3.length; i < len; i++) {
          route = ref3[i];
          this.router.route(route);
        }
      }
      this.cfg.compress = clone(require('../config').server.compress);
      if (typeOf.Object(this.cfg.server.compress)) {
        this.cfg.compress = this.cfg.server.compress;
      }
    }

    Lance.prototype.initialize = function() {
      return this.templater.initialize().then((function(_this) {
        return function() {
          return _this.start().then();
        };
      })(this));
    };

    Lance.prototype.onPossiblyUnhandledRejection = function(err) {
      return this.emit('err', err, 'Promise.onPossiblyUnhandledRejection');
    };

    Lance.prototype.createServer = function(requestCallback) {
      this.requestCallback = requestCallback || function() {};
      http.globalAgent.maxSockets = this.cfg.server.maxSockets || 20;
      this.server = new http.Server((function(_this) {
        return function(req, res) {
          return new _this.RequestHandler(req, res, _this).parse();
        };
      })(this));
      this.emit('server.starting', this);
      this.server.on('listening', (function(_this) {
        return function() {
          if (_this.cfg.server.method === 'socket' && _this.cfg.server.socketPerms) {
            fs.chmod(_this.cfg.server.socket, _this.cfg.server.socketPerms);
          }
          if (!cluster.isWorker || cluster.worker.id === 1) {
            return _this.emit('server.listening', _this);
          }
        };
      })(this));
      return this.server;
    };

    Lance.prototype.createCluster = function*() {
      var c, server, workerLimit;
      if (this.cfg.server.method === 'socket' && !this.cfg.server.socket) {
        this.cfg.server.method = 'port';
      }
      if (cluster.isWorker) {
        server = this.createServer(this.requestCallback);
        return (yield this.listen());
      } else {
        workerLimit = os.cpus().length;
        if (this.cfg.server.workers < workerLimit) {
          workerLimit = this.cfg.server.workers;
        }
        if (this.cfg.server.method === 'socket') {
          if (fs.existsSync(this.cfg.server.socket)) {
            fs.unlinkSync(this.cfg.server.socket);
          }
        }
        this.emit('cluster.starting', this);
        cluster.on('online', (function(_this) {
          return function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this.emit.apply(_this, ['cluster.worker.online'].concat(slice.call(args)));
          };
        })(this));
        cluster.on('offline', (function(_this) {
          return function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this.emit.apply(_this, ['cluster.worker.exit'].concat(slice.call(args)));
          };
        })(this));
        c = 0;
        while (c < workerLimit) {
          cluster.fork();
          ++c;
        }
        return;
      }
    };

    Lance.prototype.listen = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (_this.cfg.server.method === 'socket') {
            return _this.server.listen(_this.cfg.server.socket, resolve);
          } else {
            return _this.server.listen(_this.cfg.server.port, _this.cfg.server.host, resolve);
          }
        };
      })(this));
    };

    Lance.prototype.start = function() {
      if (this.cfg.server.cluster) {
        return this.createCluster();
      } else {
        this.createServer();
        return this.listen();
      }
    };

    merge(Lance, Lance.prototype, 1);

    return Lance;

  })(Emitter));

}).call(this);
